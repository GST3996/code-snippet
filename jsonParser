import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.flink.api.common.functions.FlatMapFunction;
import org.apache.flink.api.common.functions.JoinFunction;
import org.apache.flink.api.common.functions.MapFunction;
import org.apache.flink.api.common.serialization.SimpleStringSchema;
import org.apache.flink.streaming.api.datastream.DataStream;
import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;
import org.apache.flink.streaming.api.functions.source.SourceFunction;
import org.apache.flink.util.Collector;
import org.apache.flink.streaming.api.windowing.time.Time;
import org.apache.flink.api.common.typeinfo.TypeInformation;

import java.util.Iterator;
import java.util.Map;

public class FlinkJsonJoinExample {
    public static void main(String[] args) throws Exception {
        final StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();
        ObjectMapper objectMapper = new ObjectMapper();

        // Simulated DataStream<String> for User JSON
        DataStream<String> userStream = env.fromElements(
            "{\"id\": 1, \"name\": \"John Doe\", \"email\": \"john.doe@example.com\", \"age\": 30, \"city\": \"Chennai\"}",
            "{\"id\": 2, \"name\": \"Jane Smith\", \"email\": \"jane.smith@example.com\", \"age\": 28, \"city\": \"Bangalore\"}"
        );

        // Simulated DataStream<String> for Reference JSON
        DataStream<String> referenceStream = env.fromElements(
            "{\"key\": \"A1\", \"value\": 100, \"description\": \"Sample Data 1\", \"referenceProperty\": \"age\", \"status\": \"active\"}",
            "{\"key\": \"A2\", \"value\": 200, \"description\": \"Sample Data 2\", \"referenceProperty\": \"email\", \"status\": \"inactive\"}"
        );

        // Convert user JSON into key-value pairs
        DataStream<KeyValuePair> userKeyValueStream = userStream.flatMap(new FlatMapFunction<String, KeyValuePair>() {
            @Override
            public void flatMap(String value, Collector<KeyValuePair> out) throws Exception {
                JsonNode jsonNode = objectMapper.readTree(value);
                Iterator<Map.Entry<String, JsonNode>> fields = jsonNode.fields();
                while (fields.hasNext()) {
                    Map.Entry<String, JsonNode> field = fields.next();
                    out.collect(new KeyValuePair(field.getKey(), field.getValue().asText()));
                }
            }
        });

        // Convert reference JSON into a POJO
        DataStream<ReferenceData> referenceDataStream = referenceStream.map(value -> 
            objectMapper.readValue(value, ReferenceData.class)
        ).returns(TypeInformation.of(ReferenceData.class));

        // Perform a Join Operation (by matching user properties with reference properties)
        DataStream<OutputRecord> outputRecordStream = userKeyValueStream
            .join(referenceDataStream)
            .where(KeyValuePair::getKey)
            .equalTo(ReferenceData::getReferenceProperty)
            .window(Time.seconds(5)) // Optional time window
            .apply(new JoinFunction<KeyValuePair, ReferenceData, OutputRecord>() {
                @Override
                public OutputRecord join(KeyValuePair userKV, ReferenceData ref) {
                    return new OutputRecord(ref.getKey(), userKV.getValue(), ref.getDescription(), ref.getStatus());
                }
            });

        // Convert OutputRecord to JSON String
        DataStream<String> jsonStringStream = outputRecordStream.map(new MapFunction<OutputRecord, String>() {
            @Override
            public String map(OutputRecord record) throws Exception {
                return objectMapper.writeValueAsString(record);
            }
        });

        // Print the result
        jsonStringStream.print();

        env.execute("Flink JSON Stream Join Example");
    }

    // POJO for User JSON key-value pair
    public static class KeyValuePair {
        private String key;
        private String value;

        public KeyValuePair() {}

        public KeyValuePair(String key, String value) {
            this.key = key;
            this.value = value;
        }

        public String getKey() { return key; }
        public String getValue() { return value; }
    }

    // POJO for Reference JSON
    public static class ReferenceData {
        private String key;
        private String referenceProperty;
        private String description;
        private String status;

        public ReferenceData() {}

        public String getKey() { return key; }
        public String getReferenceProperty() { return referenceProperty; }
        public String getDescription() { return description; }
        public String getStatus() { return status; }
    }

    // POJO for Output JSON
    public static class OutputRecord {
        private String paramId;
        private String paramValue;
        private String description;
        private String status;

        public OutputRecord() {}

        public OutputRecord(String paramId, String paramValue, String description, String status) {
            this.paramId = paramId;
            this.paramValue = paramValue;
            this.description = description;
            this.status = status;
        }

        public String getParamId() { return paramId; }
        public String getParamValue() { return paramValue; }
        public String getDescription() { return description; }
        public String getStatus() { return status; }
    }
}

import org.apache.flink.streaming.api.functions.timestamps.AscendingTimestampExtractor;
import org.apache.flink.streaming.api.windowing.assigners.TumblingEventTimeWindows;
import org.apache.flink.streaming.api.watermark.Watermark;
import org.apache.flink.api.common.eventtime.WatermarkStrategy;
import java.time.Duration;

// Assign timestamps and watermarks
DataStream<KeyValuePair> userKeyValueStream = userStream.flatMap(new FlatMapFunction<String, KeyValuePair>() {
    @Override
    public void flatMap(String value, Collector<KeyValuePair> out) throws Exception {
        JsonNode jsonNode = objectMapper.readTree(value);
        Iterator<Map.Entry<String, JsonNode>> fields = jsonNode.fields();
        while (fields.hasNext()) {
            Map.Entry<String, JsonNode> field = fields.next();
            out.collect(new KeyValuePair(field.getKey(), field.getValue().asText(), System.currentTimeMillis()));
        }
    }
}).assignTimestampsAndWatermarks(
    WatermarkStrategy.<KeyValuePair>forBoundedOutOfOrderness(Duration.ofSeconds(2))
    .withTimestampAssigner((element, recordTimestamp) -> element.getTimestamp())
);

DataStream<ReferenceData> referenceDataStream = referenceStream.map(value -> 
    objectMapper.readValue(value, ReferenceData.class)
).returns(TypeInformation.of(ReferenceData.class)).assignTimestampsAndWatermarks(
    WatermarkStrategy.<ReferenceData>forBoundedOutOfOrderness(Duration.ofSeconds(2))
    .withTimestampAssigner((element, recordTimestamp) -> System.currentTimeMillis())
);

