import org.apache.flink.api.common.functions.RichFunction;
import org.apache.flink.configuration.Configuration;
import org.apache.flink.streaming.api.functions.async.AsyncFunction;
import org.apache.flink.streaming.api.functions.async.ResultFuture;

import java.util.Collections;
import java.util.concurrent.*;

public class SampleAsyncFunction implements AsyncFunction<String, String> {
    private transient ExecutorService executor;

    @Override
    public void open(Configuration parameters) {
        executor = Executors.newFixedThreadPool(10);
    }

    @Override
    public void asyncInvoke(String input, ResultFuture<String> resultFuture) {
        CompletableFuture.supplyAsync(() -> performAsyncOperation(input), executor)
                .thenAccept(result -> resultFuture.complete(Collections.singleton(result)));
    }

    private String performAsyncOperation(String input) {
        try {
            // Simulating an external async operation (e.g., REST API, Database)
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
        return "Processed-" + input;
    }

    @Override
    public void close() throws Exception {
        executor.shutdown();
    }
}
