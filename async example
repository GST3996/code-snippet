import org.apache.flink.api.common.serialization.SimpleStringSchema;
import org.apache.flink.connector.kafka.sink.KafkaRecordSerializationSchema;
import org.apache.flink.connector.kafka.sink.KafkaSink;
import org.apache.flink.connector.kafka.source.KafkaSource;
import org.apache.flink.connector.kafka.source.enumerator.initializer.OffsetsInitializer;
import org.apache.flink.streaming.api.datastream.DataStream;
import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;

import java.util.Properties;

public class FlinkKafkaSSLTest {
    private static final String BOOTSTRAP_SERVERS = "broker1:9093,broker2:9093";
    private static final String TEST_TOPIC = "test-topic";
    private static final String GROUP_ID = "flink-test-group";

    private static Properties getSSLProperties() {
        Properties props = new Properties();
        props.setProperty("bootstrap.servers", BOOTSTRAP_SERVERS);
        props.setProperty("security.protocol", "SSL");
        props.setProperty("ssl.keystore.location", "/path/to/client.keystore.jks");
        props.setProperty("ssl.keystore.password", "keystore-password");
        props.setProperty("ssl.key.password", "key-password");
        props.setProperty("ssl.truststore.location", "/path/to/client.truststore.jks");
        props.setProperty("ssl.truststore.password", "truststore-password");
        return props;
    }

    public static void main(String[] args) throws Exception {
        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();

        // ✅ 1. Consume Messages from Kafka
        KafkaSource<String> kafkaSource = KafkaSource.<String>builder()
                .setBootstrapServers(BOOTSTRAP_SERVERS)
                .setTopics(TEST_TOPIC)
                .setGroupId(GROUP_ID)
                .setStartingOffsets(OffsetsInitializer.earliest())
                .setValueOnlyDeserializer(new SimpleStringSchema())
                .setProperties(getSSLProperties()) // Add SSL properties
                .build();

        DataStream<String> stream = env.fromSource(
                kafkaSource,
                org.apache.flink.api.common.eventtime.WatermarkStrategy.noWatermarks(),
                "Kafka Source"
        );

        stream.print(); // Print consumed messages

        // ✅ 2. Produce Messages to Kafka
        KafkaSink<String> kafkaSink = KafkaSink.<String>builder()
                .setBootstrapServers(BOOTSTRAP_SERVERS)
                .setKafkaProducerConfig(getSSLProperties())
                .setRecordSerializer(KafkaRecordSerializationSchema.builder()
                        .setTopic(TEST_TOPIC)
                        .setValueSerializationSchema(new SimpleStringSchema())
                        .build()
                )
                .build();

        env.fromElements("Test message from Flink!")
                .sinkTo(kafkaSink);

        env.execute("Flink Kafka SSL Connectivity Test");
    }
}
